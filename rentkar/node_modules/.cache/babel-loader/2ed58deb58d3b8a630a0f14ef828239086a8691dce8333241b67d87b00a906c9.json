{"ast":null,"code":"var _jsxFileName = \"/Users/ashish/Desktop/rentkar/rentkar/src/App.js\",\n  _s = $RefreshSig$();\n/*import React, { useEffect, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { getTodos, addTodo, updateTodo, deleteTodo } from './actions/todoActions'\nfunction App() {\n  const [newTodo, setNewTodo] = useState('');\n  const dispatch = useDispatch();\n  const todos = useSelector(state => state.todos.todos);\n  const loading = useSelector(state => state.todos.loading);\n\n  useEffect(() => {\n    dispatch(getTodos());\n  }, [dispatch]);\n\n  const handleAddTodo = () => {\n    dispatch(addTodo(newTodo));\n    setNewTodo('');\n  };\n\n  const handleUpdateTodo = (id, completed) => {\n    dispatch(updateTodo(id, { completed: !completed }));\n  };\n\n  const handleDeleteTodo = (id) => {\n    dispatch(deleteTodo(id));\n  };\n\n  return (\n    <div>\n      <h1>Todo List</h1>\n      <input\n        type=\"text\"\n        value={newTodo}\n        onChange={(e) => setNewTodo(e.target.value)}\n      />\n      <button onClick={handleAddTodo}>Add Todo</button>\n      {loading ? (\n        <p>Loading...</p>\n      ) : (\n        <ul>\n          {todos.map(todo => (\n            <li key={todo._id}>\n              <span\n                onClick={() => handleUpdateTodo(todo._id, todo.completed)}\n                style={{ textDecoration: todo.completed ? 'line-through' : 'none' }}\n              >\n                {todo.title}\n              </span>\n              <button onClick={() => handleDeleteTodo(todo._id)}>Delete</button>\n            </li>\n          ))}\n        </ul>\n      )}\n    </div>\n  );\n}\n\nfunction App() {\n  const [isPaymentSuccessful, setIsPaymentSuccessful] = useState(false);\n  return (\n    <div>\n      <BrowserRouter>\n      <Routes>\n        <Route path=\"/\" exact>\n          {/* Pass the setIsPaymentSuccessful function to update payment status\n          <SabpaisaPaymentGateway setIsPaymentSuccessful={setIsPaymentSuccessful} />\n        </Route>\n        <Route path=\"/protected\">\n          {/* Only render the protected component if payment was successful */\n/*  {isPaymentSuccessful ? <TodoApp/> : <Link to=\"/\" />}\n  \n</Route>\n</Routes>\n</BrowserRouter>\n</div>\n);\n}\nexport default App;\nexport default App;\n*/\n\n// App.js\nimport React, { useState } from 'react';\nimport { BrowserRouter as Router, Routes, Route, Navigate } from 'react-router-dom';\nimport SabpaisaPaymentGateway from './SabpaisaPaymentGateway';\nimport PaymentSuccess from './PaymentSuccess'; // Component to show after successful payment\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst App = () => {\n  _s();\n  // State to manage payment status\n  const [isPaymentSuccessful, setIsPaymentSuccessful] = useState(false);\n  return /*#__PURE__*/_jsxDEV(Router, {\n    children: /*#__PURE__*/_jsxDEV(Routes, {\n      children: [/*#__PURE__*/_jsxDEV(Route, {\n        path: \"/\",\n        element: /*#__PURE__*/_jsxDEV(SabpaisaPaymentGateway, {\n          setIsPaymentSuccessful: setIsPaymentSuccessful\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 102,\n          columnNumber: 20\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Route, {\n        path: \"/protected\",\n        element: isPaymentSuccessful ? /*#__PURE__*/_jsxDEV(TodoApp, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 106,\n          columnNumber: 42\n        }, this) : /*#__PURE__*/_jsxDEV(Navigate, {\n          to: \"/\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 106,\n          columnNumber: 56\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 98,\n    columnNumber: 5\n  }, this);\n};\n_s(App, \"t9VQEKKK07gl6oIrKa6S6nvFhRE=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","BrowserRouter","Router","Routes","Route","Navigate","SabpaisaPaymentGateway","PaymentSuccess","jsxDEV","_jsxDEV","App","_s","isPaymentSuccessful","setIsPaymentSuccessful","children","path","element","fileName","_jsxFileName","lineNumber","columnNumber","TodoApp","to","_c","$RefreshReg$"],"sources":["/Users/ashish/Desktop/rentkar/rentkar/src/App.js"],"sourcesContent":["/*import React, { useEffect, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { getTodos, addTodo, updateTodo, deleteTodo } from './actions/todoActions'\nfunction App() {\n  const [newTodo, setNewTodo] = useState('');\n  const dispatch = useDispatch();\n  const todos = useSelector(state => state.todos.todos);\n  const loading = useSelector(state => state.todos.loading);\n\n  useEffect(() => {\n    dispatch(getTodos());\n  }, [dispatch]);\n\n  const handleAddTodo = () => {\n    dispatch(addTodo(newTodo));\n    setNewTodo('');\n  };\n\n  const handleUpdateTodo = (id, completed) => {\n    dispatch(updateTodo(id, { completed: !completed }));\n  };\n\n  const handleDeleteTodo = (id) => {\n    dispatch(deleteTodo(id));\n  };\n\n  return (\n    <div>\n      <h1>Todo List</h1>\n      <input\n        type=\"text\"\n        value={newTodo}\n        onChange={(e) => setNewTodo(e.target.value)}\n      />\n      <button onClick={handleAddTodo}>Add Todo</button>\n      {loading ? (\n        <p>Loading...</p>\n      ) : (\n        <ul>\n          {todos.map(todo => (\n            <li key={todo._id}>\n              <span\n                onClick={() => handleUpdateTodo(todo._id, todo.completed)}\n                style={{ textDecoration: todo.completed ? 'line-through' : 'none' }}\n              >\n                {todo.title}\n              </span>\n              <button onClick={() => handleDeleteTodo(todo._id)}>Delete</button>\n            </li>\n          ))}\n        </ul>\n      )}\n    </div>\n  );\n}\n\nfunction App() {\n  const [isPaymentSuccessful, setIsPaymentSuccessful] = useState(false);\n  return (\n    <div>\n      <BrowserRouter>\n      <Routes>\n        <Route path=\"/\" exact>\n          {/* Pass the setIsPaymentSuccessful function to update payment status\n          <SabpaisaPaymentGateway setIsPaymentSuccessful={setIsPaymentSuccessful} />\n        </Route>\n        <Route path=\"/protected\">\n          {/* Only render the protected component if payment was successful */\n        /*  {isPaymentSuccessful ? <TodoApp/> : <Link to=\"/\" />}\n          \n        </Route>\n      </Routes>\n    </BrowserRouter>\n    </div>\n  );\n}\n\nexport default App;\n\nexport default App;\n*/\n\n\n\n\n\n// App.js\nimport React, { useState } from 'react';\nimport { BrowserRouter as Router, Routes, Route, Navigate } from 'react-router-dom';\nimport SabpaisaPaymentGateway from './SabpaisaPaymentGateway';\nimport PaymentSuccess from './PaymentSuccess'; // Component to show after successful payment\n\nconst App = () => {\n  // State to manage payment status\n  const [isPaymentSuccessful, setIsPaymentSuccessful] = useState(false);\n\n  return (\n    <Router>\n      <Routes>\n        <Route \n          path=\"/\" \n          element={<SabpaisaPaymentGateway setIsPaymentSuccessful={setIsPaymentSuccessful} />} \n        />\n        <Route \n          path=\"/protected\" \n          element={isPaymentSuccessful ? <TodoApp /> : <Navigate to=\"/\" />} \n        />\n        {/* Add any other routes you need */}\n      </Routes>\n    </Router>\n  );\n};\n\nexport default App;\n"],"mappings":";;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACQ;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAQA;AACA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,SAASC,aAAa,IAAIC,MAAM,EAAEC,MAAM,EAAEC,KAAK,EAAEC,QAAQ,QAAQ,kBAAkB;AACnF,OAAOC,sBAAsB,MAAM,0BAA0B;AAC7D,OAAOC,cAAc,MAAM,kBAAkB,CAAC,CAAC;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAE/C,MAAMC,GAAG,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAChB;EACA,MAAM,CAACC,mBAAmB,EAAEC,sBAAsB,CAAC,GAAGb,QAAQ,CAAC,KAAK,CAAC;EAErE,oBACES,OAAA,CAACP,MAAM;IAAAY,QAAA,eACLL,OAAA,CAACN,MAAM;MAAAW,QAAA,gBACLL,OAAA,CAACL,KAAK;QACJW,IAAI,EAAC,GAAG;QACRC,OAAO,eAAEP,OAAA,CAACH,sBAAsB;UAACO,sBAAsB,EAAEA;QAAuB;UAAAI,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAE;MAAE;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACrF,CAAC,eACFX,OAAA,CAACL,KAAK;QACJW,IAAI,EAAC,YAAY;QACjBC,OAAO,EAAEJ,mBAAmB,gBAAGH,OAAA,CAACY,OAAO;UAAAJ,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAE,CAAC,gBAAGX,OAAA,CAACJ,QAAQ;UAACiB,EAAE,EAAC;QAAG;UAAAL,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAE;MAAE;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAClE,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAEI;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACH,CAAC;AAEb,CAAC;AAACT,EAAA,CAnBID,GAAG;AAAAa,EAAA,GAAHb,GAAG;AAqBT,eAAeA,GAAG;AAAC,IAAAa,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}