{"ast":null,"code":"var _jsxFileName = \"/Users/ashish/Desktop/rentkar/rentkar/src/SabpaisaPaymentGateway.js\",\n  _s = $RefreshSig$();\n/*import React, { useState, useEffect } from 'react'\nimport { PaymentInitModal } from \"pg-test-project\";\nimport { v4 as uuidv4 } from 'uuid';\nimport uniqid from 'uniqid';\n\n\nfunction SabpaisaPaymentGateway(props) {\n\n  const [isOpen, setIsOpen] = useState(false);\n  const [clientCode, setClientCode] = useState(props.clientCode);\n  const [transUserName, setTransUserName] = useState(props.transUserName);\n  const [transUserPassword, setTransUserPassword] = useState(props.transUserPassword);\n  const [authkey, setAuthkey] = useState(props.authkey);\n  const [authiv, setAuthiv] = useState(props.authiv);\n  const [payerName, setpayerName] = useState(props.payerName);\n  const [payerEmail, setpayerEmail] = useState(props.payerEmail);\n  const [payerMobile, setpayerMobile] = useState(props.payerMobile);\n  const [clientTxnId, setclientTxnId] = useState(props.clientTxnId);\n  const [amount, setamount] = useState(props.amount);\n  const [payerAddress, setpayerAddress] = useState(props.payerAddress);\n  const [callbackUrl, setCallbackUrl] = useState(props.callbackUrl);\n  const [amountType, setamountType] = useState(\"\");\n  const [udf1, setudf1] = useState(\"\");\n  const [udf2, setudf2] = useState(\"\");\n  const [udf3, setudf3] = useState(\"\");\n  const [udf4, setudf4] = useState(\"\");\n  const [udf5, setudf5] = useState(\"\");\n  const [udf6, setudf6] = useState(\"\");\n  const [udf7, setudf7] = useState(\"\");\n  const [udf8, setudf8] = useState(\"\");\n  const [udf9, setudf9] = useState(\"\");\n  const [udf10, setudf10] = useState(\"\");\n  const [udf11, setudf11] = useState(\"\");\n  const [udf12, setudf12] = useState(\"\"); // client id\n  const [udf13, setudf13] = useState(\"\"); // plan id\n  const [udf14, setudf14] = useState(\"\"); // plan name\n  const [udf15, setudf15] = useState(\"\"); // application id (product id)\n  const [udf16, setudf16] = useState(\"\"); // // client subscribe plan detail id(refer to DB)\n  const [udf17, setudf17] = useState(\"\"); // payment from the COB portal\n  const [udf18, setudf18] = useState(\"\");\n  const [udf19, setudf19] = useState(\"\");\n  const [udf20, setudf20] = useState(\"\");\n  const [channelId, setchannelId] = useState(\"\");\n  const [programId, setprogramId] = useState(\"\");\n  const [mcc, setmcc] = useState(\"\");\n\n\n  useEffect(() => {\n\n    setIsOpen(props?.isOpen)\n\n  }, [props])\n\n\n\n\n\n  return (\n    <div> {\n      //1) Testing with production enironment please pass env=\"prod\"\n      // 2)Testing with stageing enironment please pass env=\"\" or env=\"stage\"\n      // 3)Default it is going to catch env=\"\"\n      <PaymentInitModal\n        clientCode={clientCode}\n        transUserPassword={transUserPassword}\n        transUserName={transUserName}\n        isOpen={isOpen}\n        clientTxnId={uniqid()}\n        authkey={authkey}\n        authiv={authiv}\n        payerName={payerName}\n        payerEmail={payerEmail}\n        payerMobile={payerMobile}\n        payerAddress={payerAddress}\n        amount={amount}\n        amountType={amountType}\n        udf12={udf12}\n        udf13={udf13}\n        udf14={udf14}\n        udf15={udf15}\n        udf16={udf16}\n        udf17={udf17}\n        onToggle={() => setIsOpen(!isOpen)}\n        channelId={channelId}\n        programId={programId}\n        mcc={mcc}\n        label={\"Production\"}\n        env={'stag'}\n      />\n    }</div>\n\n\n\n\n  )\n}\n\nexport default SabpaisaPaymentGateway\n*/\n\n// SabpaisaPaymentGateway.js\nimport React, { useEffect } from 'react';\nimport { PaymentInitModal } from 'pg-test-project';\nimport { useNavigate } from 'react-router-dom';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction SabpaisaPaymentGateway({\n  setIsPaymentSuccessful\n}) {\n  _s();\n  const navigate = useNavigate();\n\n  // Placeholder for checking payment success, replace with actual payment logic\n  useEffect(() => {\n    // Assuming some method to detect payment success; adjust to your setup\n    const paymentCompleted = true; // Replace this with actual payment check\n\n    if (paymentCompleted) {\n      setIsPaymentSuccessful(true); // Update the state in the parent component\n      localStorage.setItem('paymentStatus', 'successful'); // Set payment status in local storage\n      navigate('/protected'); // Redirect to the protected route\n    } // Redirect to the protected route\n  }, [setIsPaymentSuccessful, navigate]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(PaymentInitModal, {\n      clientCode: clientCode,\n      transUserPassword: transUserPassword,\n      transUserName: transUserName,\n      isOpen: isOpen,\n      clientTxnId: uniqid(),\n      authkey: authkey,\n      authiv: authiv,\n      payerName: payerName,\n      payerEmail: payerEmail,\n      payerMobile: payerMobile,\n      payerAddress: payerAddress,\n      amount: amount,\n      amountType: amountType,\n      udf12: udf12,\n      udf13: udf13,\n      udf14: udf14,\n      udf15: udf15,\n      udf16: udf16,\n      udf17: udf17,\n      onToggle: () => setIsOpen(!isOpen),\n      channelId: channelId,\n      programId: programId,\n      mcc: mcc,\n      label: \"Production\",\n      env: 'stag'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 8\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 122,\n    columnNumber: 5\n  }, this);\n}\n_s(SabpaisaPaymentGateway, \"0pNeyzXk/ByIxyERsdaIrG6js9s=\", false, function () {\n  return [useNavigate];\n});\n_c = SabpaisaPaymentGateway;\nexport default SabpaisaPaymentGateway;\nvar _c;\n$RefreshReg$(_c, \"SabpaisaPaymentGateway\");","map":{"version":3,"names":["React","useEffect","PaymentInitModal","useNavigate","jsxDEV","_jsxDEV","SabpaisaPaymentGateway","setIsPaymentSuccessful","_s","navigate","paymentCompleted","localStorage","setItem","children","clientCode","transUserPassword","transUserName","isOpen","clientTxnId","uniqid","authkey","authiv","payerName","payerEmail","payerMobile","payerAddress","amount","amountType","udf12","udf13","udf14","udf15","udf16","udf17","onToggle","setIsOpen","channelId","programId","mcc","label","env","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/ashish/Desktop/rentkar/rentkar/src/SabpaisaPaymentGateway.js"],"sourcesContent":["/*import React, { useState, useEffect } from 'react'\nimport { PaymentInitModal } from \"pg-test-project\";\nimport { v4 as uuidv4 } from 'uuid';\nimport uniqid from 'uniqid';\n\n\nfunction SabpaisaPaymentGateway(props) {\n\n  const [isOpen, setIsOpen] = useState(false);\n  const [clientCode, setClientCode] = useState(props.clientCode);\n  const [transUserName, setTransUserName] = useState(props.transUserName);\n  const [transUserPassword, setTransUserPassword] = useState(props.transUserPassword);\n  const [authkey, setAuthkey] = useState(props.authkey);\n  const [authiv, setAuthiv] = useState(props.authiv);\n  const [payerName, setpayerName] = useState(props.payerName);\n  const [payerEmail, setpayerEmail] = useState(props.payerEmail);\n  const [payerMobile, setpayerMobile] = useState(props.payerMobile);\n  const [clientTxnId, setclientTxnId] = useState(props.clientTxnId);\n  const [amount, setamount] = useState(props.amount);\n  const [payerAddress, setpayerAddress] = useState(props.payerAddress);\n  const [callbackUrl, setCallbackUrl] = useState(props.callbackUrl);\n  const [amountType, setamountType] = useState(\"\");\n  const [udf1, setudf1] = useState(\"\");\n  const [udf2, setudf2] = useState(\"\");\n  const [udf3, setudf3] = useState(\"\");\n  const [udf4, setudf4] = useState(\"\");\n  const [udf5, setudf5] = useState(\"\");\n  const [udf6, setudf6] = useState(\"\");\n  const [udf7, setudf7] = useState(\"\");\n  const [udf8, setudf8] = useState(\"\");\n  const [udf9, setudf9] = useState(\"\");\n  const [udf10, setudf10] = useState(\"\");\n  const [udf11, setudf11] = useState(\"\");\n  const [udf12, setudf12] = useState(\"\"); // client id\n  const [udf13, setudf13] = useState(\"\"); // plan id\n  const [udf14, setudf14] = useState(\"\"); // plan name\n  const [udf15, setudf15] = useState(\"\"); // application id (product id)\n  const [udf16, setudf16] = useState(\"\"); // // client subscribe plan detail id(refer to DB)\n  const [udf17, setudf17] = useState(\"\"); // payment from the COB portal\n  const [udf18, setudf18] = useState(\"\");\n  const [udf19, setudf19] = useState(\"\");\n  const [udf20, setudf20] = useState(\"\");\n  const [channelId, setchannelId] = useState(\"\");\n  const [programId, setprogramId] = useState(\"\");\n  const [mcc, setmcc] = useState(\"\");\n\n\n  useEffect(() => {\n\n    setIsOpen(props?.isOpen)\n\n  }, [props])\n\n\n\n\n\n  return (\n    <div> {\n      //1) Testing with production enironment please pass env=\"prod\"\n      // 2)Testing with stageing enironment please pass env=\"\" or env=\"stage\"\n      // 3)Default it is going to catch env=\"\"\n      <PaymentInitModal\n        clientCode={clientCode}\n        transUserPassword={transUserPassword}\n        transUserName={transUserName}\n        isOpen={isOpen}\n        clientTxnId={uniqid()}\n        authkey={authkey}\n        authiv={authiv}\n        payerName={payerName}\n        payerEmail={payerEmail}\n        payerMobile={payerMobile}\n        payerAddress={payerAddress}\n        amount={amount}\n        amountType={amountType}\n        udf12={udf12}\n        udf13={udf13}\n        udf14={udf14}\n        udf15={udf15}\n        udf16={udf16}\n        udf17={udf17}\n        onToggle={() => setIsOpen(!isOpen)}\n        channelId={channelId}\n        programId={programId}\n        mcc={mcc}\n        label={\"Production\"}\n        env={'stag'}\n      />\n    }</div>\n\n\n\n\n  )\n}\n\nexport default SabpaisaPaymentGateway\n*/\n\n// SabpaisaPaymentGateway.js\nimport React, { useEffect } from 'react';\nimport { PaymentInitModal } from 'pg-test-project';\nimport { useNavigate } from 'react-router-dom';\nfunction SabpaisaPaymentGateway({ setIsPaymentSuccessful }) {\n  const navigate = useNavigate();\n  \n  // Placeholder for checking payment success, replace with actual payment logic\n  useEffect(() => {\n    // Assuming some method to detect payment success; adjust to your setup\n    const paymentCompleted = true; // Replace this with actual payment check\n\n      if (paymentCompleted) {\n        setIsPaymentSuccessful(true); // Update the state in the parent component\n        localStorage.setItem('paymentStatus', 'successful'); // Set payment status in local storage\n        navigate('/protected'); // Redirect to the protected route\n      } // Redirect to the protected route\n    \n  }, [setIsPaymentSuccessful, navigate]);\n\n  return (\n    <div>\n       <PaymentInitModal\n        clientCode={clientCode}\n        transUserPassword={transUserPassword}\n        transUserName={transUserName}\n        isOpen={isOpen}\n        clientTxnId={uniqid()}\n        authkey={authkey}\n        authiv={authiv}\n        payerName={payerName}\n        payerEmail={payerEmail}\n        payerMobile={payerMobile}\n        payerAddress={payerAddress}\n        amount={amount}\n        amountType={amountType}\n        udf12={udf12}\n        udf13={udf13}\n        udf14={udf14}\n        udf15={udf15}\n        udf16={udf16}\n        udf17={udf17}\n        onToggle={() => setIsOpen(!isOpen)}\n        channelId={channelId}\n        programId={programId}\n        mcc={mcc}\n        label={\"Production\"}\n        env={'stag'}\n      />\n    </div>\n  );\n}\n\nexport default SabpaisaPaymentGateway;\n"],"mappingsxC,SAASC,gBAAgB,QAAQ,iBAAiB;AAClD,SAASC,WAAW,QAAQ,kBAAkB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAC/C,SAASC,sBAAsBA,CAAC;EAAEC;AAAuB,CAAC,EAAE;EAAAC,EAAA;EAC1D,MAAMC,QAAQ,GAAGN,WAAW,CAAC,CAAC;;EAE9B;EACAF,SAAS,CAAC,MAAM;IACd;IACA,MAAMS,gBAAgB,GAAG,IAAI,CAAC,CAAC;;IAE7B,IAAIA,gBAAgB,EAAE;MACpBH,sBAAsB,CAAC,IAAI,CAAC,CAAC,CAAC;MAC9BI,YAAY,CAACC,OAAO,CAAC,eAAe,EAAE,YAAY,CAAC,CAAC,CAAC;MACrDH,QAAQ,CAAC,YAAY,CAAC,CAAC,CAAC;IAC1B,CAAC,CAAC;EAEN,CAAC,EAAE,CAACF,sBAAsB,EAAEE,QAAQ,CAAC,CAAC;EAEtC,oBACEJ,OAAA;IAAAQ,QAAA,eACGR,OAAA,CAACH,gBAAgB;MAChBY,UAAU,EAAEA,UAAW;MACvBC,iBAAiB,EAAEA,iBAAkB;MACrCC,aAAa,EAAEA,aAAc;MAC7BC,MAAM,EAAEA,MAAO;MACfC,WAAW,EAAEC,MAAM,CAAC,CAAE;MACtBC,OAAO,EAAEA,OAAQ;MACjBC,MAAM,EAAEA,MAAO;MACfC,SAAS,EAAEA,SAAU;MACrBC,UAAU,EAAEA,UAAW;MACvBC,WAAW,EAAEA,WAAY;MACzBC,YAAY,EAAEA,YAAa;MAC3BC,MAAM,EAAEA,MAAO;MACfC,UAAU,EAAEA,UAAW;MACvBC,KAAK,EAAEA,KAAM;MACbC,KAAK,EAAEA,KAAM;MACbC,KAAK,EAAEA,KAAM;MACbC,KAAK,EAAEA,KAAM;MACbC,KAAK,EAAEA,KAAM;MACbC,KAAK,EAAEA,KAAM;MACbC,QAAQ,EAAEA,CAAA,KAAMC,SAAS,CAAC,CAAClB,MAAM,CAAE;MACnCmB,SAAS,EAAEA,SAAU;MACrBC,SAAS,EAAEA,SAAU;MACrBC,GAAG,EAAEA,GAAI;MACTC,KAAK,EAAE,YAAa;MACpBC,GAAG,EAAE;IAAO;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACb;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACC,CAAC;AAEV;AAACpC,EAAA,CA/CQF,sBAAsB;EAAA,QACZH,WAAW;AAAA;AAAA0C,EAAA,GADrBvC,sBAAsB;AAiD/B,eAAeA,sBAAsB;AAAC,IAAAuC,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}